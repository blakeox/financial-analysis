---
interface NavLink {
  label: string;
  href: string;
}

interface Props {
  id?: string;
  navLinks: NavLink[];
  currentPath: string;
  cta?: { label: string; href: string };
}

const {
  id = 'site-header',
  navLinks,
  currentPath,
  cta = { label: 'Launch App', href: '/analysis' },
} = Astro.props as Props;

const isActive = (href: string) => (href === '/' ? currentPath === '/' : currentPath.startsWith(href));
---

<header
  id={id}
  class="sticky top-0 z-50 w-full border-b border-gray-200 bg-white/85 text-gray-900 backdrop-blur-md transition-colors dark:border-gray-800 dark:bg-gray-950/80 dark:text-gray-100"
>
  <div class="relative mx-auto flex h-16 w-full max-w-6xl items-center px-4 sm:px-6 lg:px-8">
    <div class="flex flex-1 items-center justify-start">
      <a
        href="/"
        class="inline-flex items-center gap-2 text-lg font-semibold tracking-tight focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500/70 sm:text-xl"
        aria-label="Financial Analysis home"
      >
        <span>Financial</span>
        <span class="text-blue-600 dark:text-blue-400">Analysis</span>
      </a>
    </div>

    <nav class="hidden flex-1 items-center justify-center gap-8 text-sm font-medium md:flex" aria-label="Primary navigation">
      {navLinks.map((link) => (
        <a
          href={link.href}
          aria-current={isActive(link.href) ? 'page' : undefined}
          class={`relative inline-flex items-center justify-center px-1 py-2 transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500/70 ${
            isActive(link.href)
              ? 'text-blue-600 after:absolute after:-bottom-1 after:left-0 after:h-0.5 after:w-full after:rounded-full after:bg-blue-600 dark:text-blue-300 dark:after:bg-blue-300'
              : 'text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white'
          }`}
        >
          {link.label}
        </a>
      ))}
    </nav>

    <div class="flex flex-1 items-center justify-end gap-3 md:ml-6">
      <a
        href={cta.href}
        class="hidden rounded-full bg-blue-600 px-4 py-2 text-sm font-semibold text-white shadow-sm transition hover:bg-blue-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500/70 md:inline-flex"
      >
        {cta.label}
      </a>

      <button
        type="button"
        class="inline-flex h-10 w-10 items-center justify-center rounded-full border border-gray-300 text-gray-700 transition hover:border-gray-400 hover:bg-gray-100 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500/70 lg:hidden dark:border-gray-700 dark:text-gray-100 dark:hover:bg-gray-800"
        aria-label="Toggle navigation"
        aria-controls="mobile-nav"
        aria-expanded="false"
        data-nav-toggle
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M4 6h16" />
          <path d="M4 12h16" />
          <path d="M4 18h16" />
        </svg>
      </button>
    </div>

    <div
      id="mobile-nav"
      class="absolute left-4 right-4 top-[calc(100%+0.75rem)] lg:hidden"
      data-nav-panel
      hidden
    >
      <div class="rounded-2xl border border-gray-200 bg-white p-4 shadow-lg shadow-gray-900/10 dark:border-gray-800 dark:bg-gray-900">
        <nav aria-label="Mobile navigation" class="space-y-1">
          {navLinks.map((link) => (
            <a
              href={link.href}
              aria-current={isActive(link.href) ? 'page' : undefined}
              class={`block rounded-xl px-3 py-2 text-base font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500/70 ${
                isActive(link.href)
                  ? 'bg-blue-50 text-blue-700 dark:bg-blue-500/15 dark:text-blue-200'
                  : 'text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-800'
              }`}
              data-nav-link
            >
              {link.label}
            </a>
          ))}
        </nav>

        <a
          href={cta.href}
          class="mt-3 inline-flex w-full items-center justify-center rounded-xl bg-blue-600 px-4 py-2 text-sm font-semibold text-white transition hover:bg-blue-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500/70"
          data-nav-link
        >
          {cta.label}
        </a>
      </div>
    </div>
  </div>
</header>
<div class="lg:hidden" data-nav-overlay hidden></div>

<script is:inline>
  (() => {
    if (typeof document === 'undefined') return;
    const toggle = document.querySelector('[data-nav-toggle]');
    const panel = document.querySelector('[data-nav-panel]');
    const overlay = document.querySelector('[data-nav-overlay]');
    if (!toggle || !(panel instanceof HTMLElement)) return;

    const setExpanded = (expanded) => {
      toggle.setAttribute('aria-expanded', expanded ? 'true' : 'false');
      panel.hidden = !expanded;
      if (overlay instanceof HTMLElement) {
        overlay.hidden = !expanded;
        overlay.className = expanded
          ? 'fixed inset-0 z-40 bg-black/40 backdrop-blur-sm md:hidden'
          : 'md:hidden';
      }
      document.body.classList.toggle('overflow-hidden', expanded);
    };

    toggle.addEventListener('click', () => {
      const expanded = toggle.getAttribute('aria-expanded') === 'true';
      setExpanded(!expanded);
    });

    panel.addEventListener('click', (event) => {
      const target = event.target;
      if (target instanceof HTMLElement && target.hasAttribute('data-nav-link')) {
        setExpanded(false);
      }
    });

    overlay?.addEventListener('click', () => setExpanded(false));

    window.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') setExpanded(false);
    });

    const mq = window.matchMedia('(min-width: 1024px)');
    const handleResize = () => {
      if (mq.matches) setExpanded(false);
    };
    mq.addEventListener('change', handleResize);
  })();
</script>
